# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/sw-driver-forecaster',
                'doc_host': 'https://arclab.github.io',
                'git_url': 'https://github.com/arclab/sw-driver-forecaster',
                'lib_path': 'swdf'},
  'syms': { 'swdf.benchmark': { 'swdf.benchmark.forecast_error': ('benchmark.html#forecast_error', 'swdf/benchmark.py'),
                                'swdf.benchmark.percent_forecast_error': ('benchmark.html#percent_forecast_error', 'swdf/benchmark.py')},
            'swdf.losses': { 'swdf.losses.ClassificationLoss': ('losses.html#classificationloss', 'swdf/losses.py'),
                             'swdf.losses.ClassificationLoss.__init__': ('losses.html#classificationloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.ClassificationLoss.forward': ('losses.html#classificationloss.forward', 'swdf/losses.py'),
                             'swdf.losses.ClassificationLoss.loss_measure': ( 'losses.html#classificationloss.loss_measure',
                                                                              'swdf/losses.py'),
                             'swdf.losses.HubberLoss': ('losses.html#hubberloss', 'swdf/losses.py'),
                             'swdf.losses.HubberLoss.__init__': ('losses.html#hubberloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.HubberLoss._compute_loss': ('losses.html#hubberloss._compute_loss', 'swdf/losses.py'),
                             'swdf.losses.Loss': ('losses.html#loss', 'swdf/losses.py'),
                             'swdf.losses.Loss.__init__': ('losses.html#loss.__init__', 'swdf/losses.py'),
                             'swdf.losses.Loss._compute_loss': ('losses.html#loss._compute_loss', 'swdf/losses.py'),
                             'swdf.losses.Loss._reduce': ('losses.html#loss._reduce', 'swdf/losses.py'),
                             'swdf.losses.Loss.forward': ('losses.html#loss.forward', 'swdf/losses.py'),
                             'swdf.losses.LossMetrics': ('losses.html#lossmetrics', 'swdf/losses.py'),
                             'swdf.losses.LossMetrics.__init__': ('losses.html#lossmetrics.__init__', 'swdf/losses.py'),
                             'swdf.losses.LossMetrics._apply_weighted_loss_by_level': ( 'losses.html#lossmetrics._apply_weighted_loss_by_level',
                                                                                        'swdf/losses.py'),
                             'swdf.losses.LossMetrics._compute_misclassifications': ( 'losses.html#lossmetrics._compute_misclassifications',
                                                                                      'swdf/losses.py'),
                             'swdf.losses.LossMetrics._count_misclassifications_by_level': ( 'losses.html#lossmetrics._count_misclassifications_by_level',
                                                                                             'swdf/losses.py'),
                             'swdf.losses.LossMetrics._generate_loss_functions': ( 'losses.html#lossmetrics._generate_loss_functions',
                                                                                   'swdf/losses.py'),
                             'swdf.losses.LossMetrics.get_metrics': ('losses.html#lossmetrics.get_metrics', 'swdf/losses.py'),
                             'swdf.losses.MAELoss': ('losses.html#maeloss', 'swdf/losses.py'),
                             'swdf.losses.MAELoss.__init__': ('losses.html#maeloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.MAELoss._compute_loss': ('losses.html#maeloss._compute_loss', 'swdf/losses.py'),
                             'swdf.losses.MSELoss': ('losses.html#mseloss', 'swdf/losses.py'),
                             'swdf.losses.MSELoss.__init__': ('losses.html#mseloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.MSELoss._compute_loss': ('losses.html#mseloss._compute_loss', 'swdf/losses.py'),
                             'swdf.losses.MSLELoss': ('losses.html#msleloss', 'swdf/losses.py'),
                             'swdf.losses.MSLELoss.__init__': ('losses.html#msleloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.MSLELoss._compute_loss': ('losses.html#msleloss._compute_loss', 'swdf/losses.py'),
                             'swdf.losses.TrendedLoss': ('losses.html#trendedloss', 'swdf/losses.py'),
                             'swdf.losses.TrendedLoss.__init__': ('losses.html#trendedloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.TrendedLoss._calculate_trends': ('losses.html#trendedloss._calculate_trends', 'swdf/losses.py'),
                             'swdf.losses.TrendedLoss._slope': ('losses.html#trendedloss._slope', 'swdf/losses.py'),
                             'swdf.losses.TrendedLoss.forward': ('losses.html#trendedloss.forward', 'swdf/losses.py'),
                             'swdf.losses.WeightedLoss': ('losses.html#weightedloss', 'swdf/losses.py'),
                             'swdf.losses.WeightedLoss.__init__': ('losses.html#weightedloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.WeightedLoss.forward': ('losses.html#weightedloss.forward', 'swdf/losses.py'),
                             'swdf.losses.WeightedLoss.loss_measure': ('losses.html#weightedloss.loss_measure', 'swdf/losses.py'),
                             'swdf.losses.WeightedLoss.weighted_loss_tensor': ( 'losses.html#weightedloss.weighted_loss_tensor',
                                                                                'swdf/losses.py'),
                             'swdf.losses.wHubberLoss': ('losses.html#whubberloss', 'swdf/losses.py'),
                             'swdf.losses.wHubberLoss.__init__': ('losses.html#whubberloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.wHubberLoss.loss_measure': ('losses.html#whubberloss.loss_measure', 'swdf/losses.py'),
                             'swdf.losses.wMAELoss': ('losses.html#wmaeloss', 'swdf/losses.py'),
                             'swdf.losses.wMAELoss.__init__': ('losses.html#wmaeloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.wMAELoss.loss_measure': ('losses.html#wmaeloss.loss_measure', 'swdf/losses.py'),
                             'swdf.losses.wMSELoss': ('losses.html#wmseloss', 'swdf/losses.py'),
                             'swdf.losses.wMSELoss.__init__': ('losses.html#wmseloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.wMSELoss.loss_measure': ('losses.html#wmseloss.loss_measure', 'swdf/losses.py'),
                             'swdf.losses.wMSLELoss': ('losses.html#wmsleloss', 'swdf/losses.py'),
                             'swdf.losses.wMSLELoss.__init__': ('losses.html#wmsleloss.__init__', 'swdf/losses.py'),
                             'swdf.losses.wMSLELoss.loss_measure': ('losses.html#wmsleloss.loss_measure', 'swdf/losses.py')},
            'swdf.models': { 'swdf.models.PersistenceModel': ('models.html#persistencemodel', 'swdf/models.py'),
                             'swdf.models.PersistenceModel.__init__': ('models.html#persistencemodel.__init__', 'swdf/models.py'),
                             'swdf.models.PersistenceModel.forward': ('models.html#persistencemodel.forward', 'swdf/models.py'),
                             'swdf.models.PersistenceModel.step': ('models.html#persistencemodel.step', 'swdf/models.py'),
                             'swdf.models.PersistenceModel.zero_grad': ('models.html#persistencemodel.zero_grad', 'swdf/models.py')},
            'swdf.preprocessing': { 'swdf.preprocessing.PolyImputer': ('preprocessing.html#polyimputer', 'swdf/preprocessing.py'),
                                    'swdf.preprocessing.PolyImputer.__init__': ( 'preprocessing.html#polyimputer.__init__',
                                                                                 'swdf/preprocessing.py'),
                                    'swdf.preprocessing.PolyImputer._find_best_polynomial': ( 'preprocessing.html#polyimputer._find_best_polynomial',
                                                                                              'swdf/preprocessing.py'),
                                    'swdf.preprocessing.PolyImputer._plot_polynomial_fit': ( 'preprocessing.html#polyimputer._plot_polynomial_fit',
                                                                                             'swdf/preprocessing.py'),
                                    'swdf.preprocessing.PolyImputer.fit': ('preprocessing.html#polyimputer.fit', 'swdf/preprocessing.py'),
                                    'swdf.preprocessing.PolyImputer.transform': ( 'preprocessing.html#polyimputer.transform',
                                                                                  'swdf/preprocessing.py')},
            'swdf.utils': { 'swdf.utils._highlight_better_values': ('utils.html#_highlight_better_values', 'swdf/utils.py'),
                            'swdf.utils.bold_best': ('utils.html#bold_best', 'swdf/utils.py'),
                            'swdf.utils.clean_f10_values': ('utils.html#clean_f10_values', 'swdf/utils.py'),
                            'swdf.utils.convert_uuids_to_indices': ('utils.html#convert_uuids_to_indices', 'swdf/utils.py'),
                            'swdf.utils.create_latex_comparison_tables': ('utils.html#create_latex_comparison_tables', 'swdf/utils.py'),
                            'swdf.utils.euclidean_distance_dict': ('utils.html#euclidean_distance_dict', 'swdf/utils.py'),
                            'swdf.utils.find_closest_distribution': ('utils.html#find_closest_distribution', 'swdf/utils.py'),
                            'swdf.utils.get_F10_historical_distribution': ('utils.html#get_f10_historical_distribution', 'swdf/utils.py'),
                            'swdf.utils.get_classified_columns': ('utils.html#get_classified_columns', 'swdf/utils.py'),
                            'swdf.utils.plot_forecast_2': ('utils.html#plot_forecast_2', 'swdf/utils.py'),
                            'swdf.utils.plot_solar_algorithm_performance': ('utils.html#plot_solar_algorithm_performance', 'swdf/utils.py'),
                            'swdf.utils.plot_solar_algorithm_performance_comparison': ( 'utils.html#plot_solar_algorithm_performance_comparison',
                                                                                        'swdf/utils.py')}}}
