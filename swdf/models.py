# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/models.ipynb.

# %% auto 0
__all__ = ['PersistenceModel']

# %% ../nbs/models.ipynb 1
import torch
import torch.nn as nn

class PersistenceModel(nn.Module):
    def __init__(self, horizon):
        """
        Initialize the PersistenceModel.

        Parameters:
        - c_in (int): Number of input channels/features (not used directly).
        - c_out (int): The output size, i.e., the horizon of the forecast.
        - seq_len (int): Length of the input sequence (not used directly).
        - pred_dim (int): Number of predictive dimensions (not used directly).
        - kwargs: Additional keyword arguments for future flexibility.
        """
        super(PersistenceModel, self).__init__()
        self.horizon = horizon

    def step(self): pass
    def zero_grad(self): pass

    def forward(self, x):
        last_values = x[:,:,-1].unsqueeze(-1)
        output = last_values.expand(-1, -1, self.horizon) 
        return output
    
